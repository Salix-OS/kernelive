#Maintainer: JRD <jrd@salixos.org>
# vim: set syn=sh ft=sh et sw=2 sts=2 ts=2 tw=0:

_kver=3.10.17
_aufscommit=ce9cff
pkgname=kernelive
pkgver=$(echo $_kver|tr - .)
pkgrel=1cp
_configname=config-huge$(uname -m|grep -q 64 || echo '-smp')-$_kver$(uname -m|grep -q 64 && echo '.x64').live
source=(https://www.kernel.org/pub/linux/kernel/v3.x/linux-$_kver.tar.xz CVE-2004-0038.diff $_configname.xz $_configname.patch aufs3-standalone-$_aufscommit.tar.xz)
sourcetemplate=http://enialis.net/~jrd/salix/$pkgname/$pkgver-\$arch-$pkgrel/
docs=("readme" "copying")
options=('nostrip')

slackdesc=\
(
#|-----handy-ruler------------------------------------------------------|
"$pkgname (Linux kernel for Salix Live)"
"Linux kernel for Salix Live is compiled with support for"
"squashfs, xz & aufs3 as well as for most hardware, "
"including SCSI, USB booting devices, etc.. "
""
"This is the same kernel config as kernel-huge but with aufs3 FS patch."
)

build() {
  export KVER=$_kver
  export KVEREXTRA=$KVER$(uname -m|grep -q 64 || echo '-smp')
  export nbthreads=$(grep ^processor /proc/cpuinfo|wc -l)
  mv $SRC/linux-$KVER $SRC/linuxsrc
  (
    ARCH_BAK=$ARCH
    unset ARCH
    cd $SRC/linuxsrc
    echo '* Applying CVE-2004-0038.diff... *'
    patch -p1 -i $SRC/CVE-2004-0038.diff || exit 1
    # patch the kernel to use a new FS : aufs (an unionfs like filesystem)
    for f in Documentation fs include/uapi/linux/aufs_type.h; do
      mkdir -p $(dirname $f) || exit 1
      cp -r $SRC/aufs3-standalone-$_aufscommit/$f $(dirname $f)/ || exit 1
    done
    echo '* Applying aufs3-kbuild.patch... *'
    patch -p1 -i $SRC/aufs3-standalone-$_aufscommit/aufs3-kbuild.patch || exit 1
    echo '* Applying aufs3-base.patch... *'
    patch -p1 -i $SRC/aufs3-standalone-$_aufscommit/aufs3-base.patch || exit 1
    echo '* Applying aufs3-mmap.patch... *'
    # mm/freemap.c has been changed and the patch for it cannot be applied.
    # So patch it with sed and remove the patch chunk from the patch file
    sed -ri "/mmap_region/ {
      i \
			vma_get_file(vma);
      N;
      a \
			vma_fput(vma);
      }" mm/fremap.c || exit 1
    sed -ri '\:^diff --git a/mm/fremap.c:,+13 d' $SRC/aufs3-standalone-$_aufscommit/aufs3-mmap.patch || exit 1
    patch -p1 -i $SRC/aufs3-standalone-$_aufscommit/aufs3-mmap.patch || exit 1
    # use a suitable configuration for live environnement.
    cp $SRC/$_configname .config || exit 1
    make oldconfig scripts prepare || exit 1
    echo "about to compile..."
    sleep 5
    # compile the kernel
    echo '########################################'
    echo "Compiling modules..."
    echo '########################################'
    make -j $nbthreads modules || exit 1
    echo '########################################'
    echo "Compiling kernel image..."
    echo '########################################'
    make -j $nbthreads bzImage || exit 1
    export INSTALL_MOD_PATH=$PKG
    echo '########################################'
    echo "Installing modules..."
    echo '########################################'
    make -j $nbthreads modules_install || exit 1
    unset INSTALL_MOD_PATH
    ARCH=$ARCH_BAK
  )
  if [ $? -ne 0 ]; then
    exit 1
  fi
  # copy the kernel
  cd $PKG
  mkdir -p boot
  (
    cd boot
    cp $SRC/linuxsrc/.config config-huge-$KVEREXTRA
    cp $SRC/linuxsrc/System.map System.map-huge-$KVEREXTRA
    cp $SRC/linuxsrc/arch/x86/boot/bzImage vmlinuz-huge-$KVEREXTRA
    ln -s config-huge-$KVEREXTRA config
    ln -s System.map-huge-$KVEREXTRA System.map
    ln -s vmlinuz-huge-$KVEREXTRA vmlinuz
  )
  # create rc.modules
  mkdir -p etc/rc.d
  cat << EOF > etc/rc.d/rc.modules
#!/bin/sh
# rc.modules   $(date) <Generated by kernelive>
#
# This file loads extra drivers into the Linux kernel.
# As kmod and udev handle module loading, this file will be mostly
# commented out, but is still useful for loading selected modules at boot time.
#

RELEASE=\$(uname -r)

echo "Updating module dependencies for Linux \$RELEASE"

/sbin/depmod -A

EOF
  depmod -a -b $PKG -F $PKG/boot/System.map $KVEREXTRA || exit 1
  find $PKG/lib/modules/$KVEREXTRA -name '*.ko' -exec basename '{}' .ko \; | sort | sed 's,.*,# /sbin/modprobe -q &,' >> etc/rc.d/rc.modules
  for m in ac agpgart battery button fan fuse lp parport parport_pc processor thermal video acpi-cpufreq powernow-k6 powernow-k7 powernow-k8 speedstep-smi speedstep-ich speedstep-centrino gx-suspmod longrun longhaul cpufreq-nforce2 e_powersaver cpufreq_ondemand; do
    sed -ri 's,# (.* '$m'$),\1 2>/dev/null,' etc/rc.d/rc.modules
  done
  cat << 'EOF' >> etc/rc.d/rc.modules

SCALING_GOVERNOR=ondemand
# Try to enable the scaling_governor selected above:
if [ -r /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors ]; then
  if grep -wq "$SCALING_GOVERNOR" /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors ; then
    if [ -r /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor ]; then
      for SYSCPUFILE in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor ; do
        echo "$SCALING_GOVERNOR" > $SYSCPUFILE
      done
    fi
  fi
fi
EOF
  chmod 755 etc/rc.d/rc.modules
  # copy files necessary for later builds, like nvidia, ati, vbox and vmware
  (
    cd $SRC/linuxsrc
    mkdir -p $PKG/usr/src/linux-$KVER/include
    mkdir -p $PKG/usr/src/linux-$KVER/arch
    for i in acpi asm-generic config drm generated linux math-emu media net pcmcia scsi sound trace video xen; do
      cp -rf include/$i $PKG/usr/src/linux-$KVER/include/
    done
    cp -rf arch/x86 $PKG/usr/src/linux-$KVER/arch/
    cp -rf scripts Makefile Kbuild Module.symvers .config $PKG/usr/src/linux-$KVER/
    # fix permissions on scripts dir
    chmod 755 -R $PKG/usr/src/linux-$KVER/scripts
    # add video headers
    mkdir -p $PKG/usr/src/linux-$KVER/drivers/video
    for i in $(find drivers/video -name "*.h"); do
      mkdir -p $PKG/usr/src/linux-$KVER/$(dirname $i)
      cp $i $PKG/usr/src/linux-$KVER/$i
    done
    # add md headers
    mkdir -p $PKG/usr/src/linux-$KVER/drivers/md
    cp drivers/md/*.h $PKG/usr/src/linux-$KVER/drivers/md
    # add wireless headers
    mkdir -p $PKG/usr/src/linux-$KVER/net/mac80211/
    cp net/mac80211/*.h $PKG/usr/src/linux-$KVER/net/mac80211/
    # add CLUSTERIP file for iptables
    mkdir -p $PKG/usr/src/linux-$KVER/net/ipv4/netfilter/
    cp net/ipv4/netfilter/ipt_CLUSTERIP.c $PKG/usr/src/linux-$KVER/net/ipv4/netfilter/
    # copy Kconfig files
    for i in $(find . -name "Kconfig*"); do
      mkdir -p $PKG/usr/src/linux-$KVER/$(dirname $i)
      cp $i $PKG/usr/src/linux-$KVER/$i
    done
    # delete the kernel binary in the sources
    rm -f $PKG/usr/src/linux-$KVER/arch/x86/boot/compressed/vmlinux $PKG/usr/src/linux-$KVER/arch/x86/boot/compressed/vmlinux.bin* $PKG/usr/src/linux-$KVER/arch/x86/boot/vmlinux.bin $PKG/usr/src/linux-$KVER/arch/x86/boot/bzImage
    # delete all .o files
    for i in $(find $PKG/usr/src/linux-$KVER -name '*.o'); do
      rm -f $i
    done
  )
  # fix build and source link in /lib/modules/XXX/
  (
    cd $PKG/lib/modules/$KVEREXTRA/
    rm -f build && ln -s /usr/src/linux-$KVER build
    rm -f source && ln -s /usr/src/linux-$KVER source
  )
}
